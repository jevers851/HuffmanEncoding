import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;


public class HuffmanMain
{


	public static void main(String[] args) throws IOException

	{
			File inputFile = new File(args[0]);
			FreqTable freqs = buildFrequencyTable(inputFile);
			Tree code = freqs.buildTree();
			huffCanCode canCode = new huffCanCode(code, 257);
			code = canCode.toTree();
			
			File outputFile = new File(args[1]);
			InputStream in = new BufferedInputStream(new FileInputStream(inputFile));
			BitOutputStream out = new BitOutputStream(new BufferedOutputStream(new FileOutputStream(outputFile)));
			
			writeCode(out,canCode);
			compress(in, out, code);
			
			out.close();
			in.close();

	}
	
	public static FreqTable buildFrequencyTable(File file) throws IOException
	{
		InputStream input = new BufferedInputStream(new FileInputStream(file));
		int[] freqs = new int[257];
		freqs[256]++;
		try
		{
		while(true)
		{
			int temp = input.read();
			if (temp == -1)
				break;
			freqs[temp]++;
		}
		} 
		finally
		{
			input.close();
		}
	return new FreqTable(freqs);
	}
	public static void writeCode(BitOutputStream out, huffCanCode canCode) throws IOException
	{
		for (int i = 0; i < canCode.getsymLim(); i++)
		{
			int val = canCode.getlengths(i);
			if(val == -1)
				val = 0;
			
			for(int k = 7; k >= 0; k--)
				out.write((val >>> k) & 1);
			
		}
	}
	private static void compress(InputStream in, BitOutputStream out, Tree tree) throws IOException
	{
		while(true)
		{
			int temp = in.read();
			if (temp == -1)
				break;
			writeSym(temp, out, tree);
		}
		writeSym(256, out, tree);
	}
	private static void writeSym(int sym, BitOutputStream out, Tree tree) throws IOException
	{
		List<Integer> bits = tree.getCode(sym);
		for (int b: bits)
			out.write(b);
	}
}
